##### github link for the dataset: https://github.com/murtazahassan/Digits-Classification



import numpy as np
import cv2
import os
import keras.layers, keras.optimizers, keras.preprocessing
import keras.engine.sequential
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from keras.preprocessing.image import ImageDataGenerator
from keras.utils.np_utils import to_categorical
import pickle

####################
path = 'myData'
test_ratio = 0.2
val_ratio = 0.2
imageDimentions = (32, 32, 3)

batchSizeValue = 50
epochValue = 1
stepsPerEpoch = 2000
####################
images = []
classNo = []

myList = os.listdir(path)
# print(myList)

noOfClasses = len(myList)

for x in range(0, noOfClasses):
    myPicList = os.listdir(path + "/" + str(x))
    for y in myPicList:
        curImg = cv2.imread(path + "/" + str(x) + '/' + y)
        curImg = cv2.resize(curImg, (imageDimentions[0], imageDimentions[1]))
        images.append(curImg)
        classNo.append(x)
    # print(x)
# print(len(classNo))

images = np.array(images)
classNo = np.array(classNo)

# print(classNo.size)
# print(images.shape)


##spliting the data
x_train, x_test, y_train, y_test = train_test_split(images, classNo, test_size=test_ratio)
x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=val_ratio)

numOfSamples = []
for i in range(0, noOfClasses):
    numOfSamples.append(len(np.where(y_train == i)[0]))


# print(numOfSamples)


# plt.figure(figsize=(10,50)) #creates the space for our figure
# plt.bar(range(0, noOfClasses), numOfSamples)
# plt.title("number of imgs for each class")
# plt.xlabel("class id")
# plt.ylabel("number of images")
# plt.show()

def preProcessing(img):
    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    img = cv2.equalizeHist(img)
    img = img / 255
    return img


# img = preProcessing(x_train[30])
# img = cv2.resize(img, (300,300))
# cv2.imshow("preprocessed", img)
# cv2.waitKey(0)

x_train = np.array(list(map(preProcessing, x_train)))
x_test = np.array(list(map(preProcessing, x_test)))
x_val = np.array(list(map(preProcessing, x_val)))

# now we add a depth for the NN
x_train = x_train.reshape(x_train.shape[0], x_train.shape[1], x_train.shape[2], 1)
x_test = x_test.reshape(x_test.shape[0], x_test.shape[1], x_test.shape[2], 1)
x_val = x_val.reshape(x_val.shape[0], x_val.shape[1], x_val.shape[2], 1)

# augmenting the date to more generalize the images
dataGen = ImageDataGenerator(
    width_shift_range=0.1,
    height_shift_range=0.1,
    zoom_range=0.2,
    shear_range=0.1,
    rotation_range=10
)

dataGen.fit(x_train)

y_train = to_categorical(y_train, noOfClasses)
y_test = to_categorical(y_test, noOfClasses)
y_val = to_categorical(y_val, noOfClasses)


# making a sequential model
def myModel():
    noOfFilters = 60
    sizeOfFilter1 = (5, 5)
    sizeOfFilter2 = (3, 3)
    sizeOfPool = (2, 2)
    noOfNode = 500

    model = keras.engine.sequential.Sequential()
    model.add((keras.layers.convolutional.Conv2D(noOfFilters,
                                                 sizeOfFilter1,
                                                 input_shape=(imageDimentions[0], imageDimentions[1], 1),
                                                 activation='relu'
                                                 )))

    model.add((keras.layers.convolutional.Conv2D(noOfFilters,
                                                 sizeOfFilter1,
                                                 activation='relu'
                                                 )))

    model.add(keras.layers.convolutional.MaxPooling2D(pool_size=sizeOfPool))

    model.add((keras.layers.convolutional.Conv2D(noOfFilters // 2,
                                                 sizeOfFilter2,
                                                 activation='relu'
                                                 )))

    model.add((keras.layers.convolutional.Conv2D(noOfFilters // 2,
                                                 sizeOfFilter2,
                                                 activation='relu'
                                                 )))

    model.add(keras.layers.convolutional.MaxPooling2D(pool_size=sizeOfPool))

    model.add(keras.layers.Dropout(0.5))

    model.add(keras.layers.Flatten())

    model.add(keras.layers.Dense(noOfNode, activation='relu'))

    model.add(keras.layers.Dropout(0.5))

    model.add(keras.layers.Dense(noOfClasses, activation='softmax'))

    model.compile(keras.optimizers.Adam(lr=0.001), loss='categorical_crossentropy',
                  metrics=['accuracy'])
    return model


model = myModel()
# print(model.summary())

history = model.fit_generator(dataGen.flow(x_train, y_train, batch_size=batchSizeValue),
                              steps_per_epoch=stepsPerEpoch,
                              epochs=epochValue,
                              validation_data=(x_val, y_val),
                              shuffle=1)

plt.figure(1)
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.legend(['training'], ['validation'])
plt.title("loss")
plt.xlabel('epoch')

plt.figure(2)
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.legend(['training'], ['validation'])
plt.title("accuracy")
plt.xlabel('epoch')
plt.show()
score = model.evaluate(x_test, y_test, verbose=0)
print('Test Score = ', score[0])
print("test Acuuracy = ", score[1])

# saving part
pickle_out = open("model_trained.pickle", "wb")
pickle.dump(model, pickle_out)
pickle_out.close()
