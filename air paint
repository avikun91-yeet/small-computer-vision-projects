import cv2
import numpy as np

frame_width = 640
frame_height = 400
cap = cv2.VideoCapture(1)
cap.set(3, frame_height)
cap.set(4, frame_width)
cap.set(10, 150)

#h_min, s_min, v_min, h_max, s_max, v_max
myColors = [[66, 124, 50, 91, 255, 174],
            ]
#[10, 98, 154, 179,  237, 255]

myColorValues = [[0, 255, 0]]

#x, y, indxcolor
myPoints = []



def findColor(img, myColors, myColorValues):
    imgHSV = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    count = 0
    newPoints=[]
    for color in myColors:
        lower = np.array(color[0:3])
        upper = np.array(color[3:6])
        mask = cv2.inRange(imgHSV, lower, upper)
        x, y = getContours(mask)
        # cv2.imshow(str(color[0]), mask)
        cv2.circle(imgResult, (x,y), 10, myColorValues[count], cv2.FILLED)
        if x!=0 and y!=0:
            newPoints.append([x, y, count])
        count+=1
    return newPoints

def getContours(img):
    contours,  hierarchy = cv2.findContours(img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    x, y, w, h = 0,0,0,0
    for cont in contours:
        area = cv2.contourArea(cont)
        if area>100:
            # cv2.drawContours(imgResult, cont, -1, (0,0,0), 10)
            peri = cv2.arcLength(cont, True)
            approx = cv2.approxPolyDP(cont, 0.02*peri, True)
            x, y, w, h = cv2.boundingRect(approx)
    return x+w//2, y

def drawoncavus(myPoints, myColorValues):
    for point in myPoints:
        cv2.circle(imgResult, (point[0], point[1]), 10, myColorValues[point[2]], cv2.FILLED)


while True:
    success, img = cap.read()
    imgResult = img.copy()
    newPoints = findColor(img, myColors, myColorValues)
    if len(newPoints)!=0:
        for newP in newPoints:
            myPoints.append(newP)

    if len(myPoints)!=0:
        drawoncavus(myPoints, myColorValues)

    cv2.imshow("result", imgResult)
    if cv2.waitKey(1) and 0xFF == ord("q"):
        break
