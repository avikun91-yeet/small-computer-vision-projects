import cv2
import numpy as np

widthImg = 480
heightImg = 640
cap = cv2.VideoCapture(1)
cap.set(3, widthImg)
cap.set(4, heightImg)
cap.set(10, 150)


def preprocessing(img):
    imgGrey = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    imgBlur = cv2.GaussianBlur(imgGrey, (5,5), 1)
    imgCanny = cv2.Canny(imgBlur, 200,200)
    kernel = np.ones((5,5))
    imgDilate = cv2.dilate(imgCanny, kernel, iterations=2)
    imgThres = cv2.erode(imgDilate, kernel, iterations=1)

    return imgThres


def getContours(img):
    biggest = np.array([])
    maxarea = 0
    contours, hierarchy = cv2.findContours(img, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
    for cont in contours:
        area = cv2.contourArea(cont)
        if area>1000:
            # cv2.drawContours(imgCont, cont, -1, (127, 0, 127), 3)
            peri = cv2.arcLength(cont, True)
            approx = cv2.approxPolyDP(cont, 0.02*peri, True)
            if area>maxarea and len(approx) ==4:
                biggest = approx
                maxarea = area
    cv2.drawContours(imgCont, biggest, -1, (127, 0, 127), 20)
    return biggest

def reoder(myPoints):
    myPoints = myPoints.reshape((4,2))
    myPointsNew = np.zeros((4,1,2), np.int32)
    add = myPoints.sum(1)

    myPointsNew[0] = myPoints[np.argmin(add)]
    myPointsNew[3] = myPoints[np.argmax(add)]
    diff = np.diff(myPoints, axis=1)
    myPointsNew[1]=myPoints[np.argmin(diff)]
    myPointsNew[2] = myPoints[np.argmax(diff)]
    return myPointsNew



def getWarp(img, biggest):
    biggest = reoder(biggest)
    pts1 = np.float32(biggest)
    pts2 = np.float32([[0,0], [widthImg, 0], [0, heightImg], [widthImg, heightImg]])
    matrix = cv2.getPerspectiveTransform(pts1, pts2)
    imgOutput = cv2.warpPerspective(img, matrix, (widthImg, heightImg))


    #pixel reduction
    imgCropped = imgOutput[20:imgOutput.shape[0]-20, 20:imgOutput.shape[1]-20]
    imgCropped = cv2.resize(imgCropped, (widthImg, heightImg))

    return imgCropped
while True:
    success, img = cap.read()
    cv2.resize(img, (widthImg, heightImg))
    imgCont = img.copy()

    imgThres = preprocessing(img)
    biggest = getContours(imgThres)
    if biggest.size !=0:

        imgWarped = getWarp(img, biggest)


    else:
        imgWarped = img


    cv2.imshow("warped", imgWarped)
    if cv2.waitKey(1) and 0xFF == ord('q'):
        break
